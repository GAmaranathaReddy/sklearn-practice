SVM :

The Advantages of support vector machines are:

    1) Effective in high dimensional spaces.
    2) Still effective in cases where number of dimensions is greater than the number of samples.
    3) Uses a subset of training points in the decision function (called support vectors), so it is also memory efficient.
    4) Versatile: different Kernel functions can be specified for the decision function. Common kernels are provided, but it is also possible to specify custom kernels.

The Disadvantages of support vector machines include:

    1) If the number of features is much greater than the number of samples, avoid over-fitting in choosing Kernel functions and regularization term is crucial.
    2) SVMs do not directly provide probability estimates, these are calculated using an expensive five-fold cross-validation (see Scores and probabilities, below).
    
Complexity:

Support Vector Machines are powerful tools, but their compute and storage requirements increase rapidly with the number of training vectors. The core of an SVM is a quadratic programming problem (QP), separating support vectors from the rest of the training data. The QP solver used by the libsvm-based implementation scales between O(N(features) * N^2(samples)) and O(N (features) * N^3(samples)) 
 depending on how efficiently the libsvm cache is used in practice (dataset dependent). If the data is very sparse  should be replaced by the average number of non-zero features in a sample vector.

For the linear case, the algorithm used in LinearSVC by the liblinear implementation is much more efficient than its libsvm-based SVC counterpart and can scale almost linearly to millions of samples and/or features.



    
Stochastic Gradient Descent :

Advantage of Stochastic Gradient Descent :
    1) Efficiency 
    2) Easy of implementation
    
Disadvantage of stochastic Gradient Descent :
    1) SGD required a number of hyperparameters such as the regularization parameter and the number of iterations.
    2) SGD is sensitive to feature scaling.
    
Complexity :
    
The major advantage of SGD is its efficiency, which is basically linear in the number of training examples. If X is a matrix of size (n, p) training has a cost of O(knp), where k is the number of iterations (epochs) and is the average number of non-zero attributes per sample.

Recent theoretical results, however, show that the runtime to get some desired optimization accuracy does not increase as the training set size increases



Diff SVM & SGD :

1) Gradient descent (GD) and Stochastic Gradient Descent(SGD) are Optimization functions.
2) Objective of a Optimization function is to give the best combinations of parameters for our algorithm which minimize the error.
3) Support Vector Machine is the Classification algorithm and GD/SGD are the optimization functions use to find best optimal hyperplane(separator).
4) Gradient Descent’s cost-function(total error of the training set) iterates over ALL training samples
5) Stochastic Gradient Descent’s cost-function only accounts for ONE training sample, chosen at random


KNN :

The optimal algorithm for a given dataset is a complicated choice, and depends on a number of factors:

1) Number of samples N (i.e. n_samples) and dimensionality D (i.e. n_features).

    1.1) Brute force query time grows as O(DN)
    1.2) Ball tree query time grows as approximately O(Dlog(N))
    1.3) KD tree query time changes with  in a way that is difficult to precisely characterise. For small D (less than 20 or so) the cost is approximately O(Dlog(N)), and the KD tree query can be very efficient. For larger , the cost increases to nearly O(DN), and the overhead due to the tree structure can lead to queries which are slower than brute force
    
2) Number of neighbors K requested for a query point

    2.1) Brute force query time is largely unaffected by the value of k
    2.2) Ball tree and KD tree query time will become slower as k increases. This is due to two effects: first, a larger  leads to the necessity to search a larger portion of the parameter space. Second, using k>1 requires internal queueing of results as the tree is traversed.
    2.3) As K becomes large compared to N , the ability to prune branches in a tree-based query is reduced. In this situation, Brute force queries can be more efficient.
    
Complexity:
 TRANING: NCA stores a matrix of pairwise distances, taking n_samples ** 2 memory. Time complexity depends on the number of iterations done by the optimisation algorithm. However, one can set the maximum number of iterations with the argument max_iter. For each iteration, time complexity is O(n_components x n_samples x min(n_samples, n_features))
 TRANSFER: 
 Here the transform operation returns LX^T, therefore its time complexity equals n_components * n_features * n_samples_test. There is no added space complexity in the operation.
 
 
Gaussian Processes:

     Gaussian Processes (GP) are a generic supervised learning method designed to solve regression and probabilistic classification problems.

The Advantages of Gaussian processes are:

    => The prediction interpolates the observations (at least for regular kernels).
    => The prediction is probabilistic (Gaussian) so that one can compute empirical confidence intervals and decide based on those  if one should refit (online fitting, adaptive fitting) the prediction in some region of interest.

Versatile: 
    => different kernels can be specified. Common kernels are provided, but it is also possible to specify custom kernels.

The Disadvantages of Gaussian processes include:

    => They are not sparse, i.e., they use the whole samples/features information to perform the prediction.
    => They lose efficiency in high dimensional spaces – namely when the number of features exceeds a few dozens.
    
    

Naive Bayes:
 
Naive Bayes methods are a set of supervised learning algorithms based on applying Bayes’ theorem with the “naive” assumption of conditional independence between every pair of features given the value of the class variable. Bayes’ theorem states the following relationship, Y given class variable Xi and dependent feature vector Xn

Advantages:

    In spite of their apparently over-simplified assumptions, naive Bayes classifiers have worked quite well in many real-world situations, famously document classification and spam filtering. 
They require a small amount of training data to estimate the necessary parameters. (For theoretical reasons why naive Bayes works well, and on which types of data it does, see the references below.)

Naive Bayes learners and classifiers can be extremely fast compared to more sophisticated methods. The decoupling of the class conditional feature distributions means that each distribution can be independently estimated as a one dimensional distribution. This in turn helps to alleviate problems stemming from the curse of dimensionality.


 
DisAdvantages :

    On the flip side, although naive Bayes is known as a decent classifier, it is known to be a bad estimator, so the probability outputs from predict_proba are not to be taken too seriously


Decision Trees:

    Decision Trees (DTs) are a non-parametric supervised learning method used for classification and regression. The goal is to create a model that predicts the value of a target variable by learning simple decision rules inferred from the data features. A tree can be seen as a piecewise constant approximation

For instance, in the example below, decision trees learn from data to approximate a sine curve with a set of if-then-else decision rules. The deeper the tree, the more complex the decision rules and the fitter the model


Some advantages of decision trees are:

    => Simple to understand and to interpret. Trees can be visualised.
    
    => Requires little data preparation. Other techniques often require data normalisation, dummy variables need to be created and blank values to be removed. Note however that this module does not support missing values.
    
    => The cost of using the tree (i.e., predicting data) is logarithmic in the number of data points used to train the tree.
    
    => Able to handle both numerical and categorical data. However scikit-learn implementation does not support categorical variables for now. Other techniques are usually specialised in analysing datasets that have only one type of variable. See algorithms for more information.

    => Able to handle multi-output problems.

    => Uses a white box model. If a given situation is observable in a model, the explanation for the condition is easily explained by boolean logic. By contrast, in a black box model (e.g., in an artificial neural network), results may be more difficult to interpret.
    
    => Possible to validate a model using statistical tests. That makes it possible to account for the reliability of the model.

    => Performs well even if its assumptions are somewhat violated by the true model from which the data were generated.
    
    
The Disadvantages of decision trees include:

    => Decision-tree learners can create over-complex trees that do not generalise the data well. This is called overfitting. Mechanisms such as pruning, setting the minimum number of samples required at a leaf node or setting the maximum depth of the tree are necessary to avoid this problem.
    
    => Decision trees can be unstable because small variations in the data might result in a completely different tree being generated. This problem is mitigated by using decision trees within an ensemble.
    
    => Predictions of decision trees are neither smooth nor continuous, but piecewise constant approximations as seen in the above figure. Therefore, they are not good at extrapolation.
    
    => The problem of learning an optimal decision tree is known to be NP-complete under several aspects of optimality and even for simple concepts. Consequently, practical decision-tree learning algorithms are based on heuristic algorithms such as the greedy algorithm where locally optimal decisions are made at each node. Such algorithms cannot guarantee to return the globally optimal decision tree. This can be mitigated by training multiple trees in an ensemble learner, where the features and samples are randomly sampled with replacement.
    
    => There are concepts that are hard to learn because decision trees do not express them easily, such as XOR, parity or multiplexer problems.

    => Decision tree learners create biased trees if some classes dominate. It is therefore recommended to balance the dataset prior to fitting with the decision tree.


Complexity:  

In general, the run time cost to construct a balanced binary tree is O(Nsample Nfeatures log(N samples))
 and query time O(log(Nsample)). Although the tree construction algorithm attempts to generate balanced trees, they will not always be balanced. Assuming that the subtrees remain approximately balanced, the cost at each node consists of searching through 
O(Nsample) to find the feature that offers the largest reduction in entropy. This has a cost of O(Nsample Nfeatureslog(Nsample))
 at each node, leading to a total cost over the entire trees (by summing the cost at each node) of N(NsamepleN^2features log(Nsamples))
 
Tips on practical use :

    => Decision trees tend to overfit on data with a large number of features. Getting the right ratio of samples to number of features is important, since a tree with few samples in high dimensional space is very likely to overfit.
    
    => Consider performing dimensionality reduction (PCA, ICA, or Feature selection) beforehand to give your tree a better chance of finding features that are discriminative
    
    => Understanding the decision tree structure will help in gaining more insights about how the decision tree makes predictions, which is important for understanding the important features in the data.
    
    => Visualise your tree as you are training by using the export function. Use max_depth=3 as an initial tree depth to get a feel for how the tree is fitting to your data, and then increase the depth.
    
    => Remember that the number of samples required to populate the tree doubles for each additional level the tree grows to. Use max_depth to control the size of the tree to prevent overfitting.
    
    => Use min_samples_split or min_samples_leaf to ensure that multiple samples inform every decision in the tree, by controlling which splits will be considered. A very small number will usually mean the tree will overfit, whereas a large number will prevent the tree from learning the data. Try min_samples_leaf=5 as an initial value. If the sample size varies greatly, a float number can be used as percentage in these two parameters. While min_samples_split can create arbitrarily small leaves, min_samples_leaf guarantees that each leaf has a minimum size, avoiding low-variance, over-fit leaf nodes in regression problems. For classification with few classes, min_samples_leaf=1 is often the best choice.
    
    => If the samples are weighted, it will be easier to optimize the tree structure using weight-based pre-pruning criterion such as min_weight_fraction_leaf, which ensure that leaf nodes contain at least a fraction of the overall sum of the sample weights




Ensemble methods:

    The goal of ensemble methods is to combine the predictions of several base estimators built with a given learning algorithm in order to improve generalizability / robustness over a single estimator.
    
   Two families of ensemble methods are usually distinguished:
   
   In Averaging methods :
       
       => the driving principle is to build several estimators independently and then to average their predictions. On average, the combined estimator is usually better than any of the single base estimator because its variance is reduced.
    
   Examples: Bagging methods, Forests of randomized trees
   
   By contrast, in boosting methods:
   
    => Base estimators are built sequentially and one tries to reduce the bias of the combined estimator. The motivation is to combine several weak models to produce a powerful ensemble.

    Examples: AdaBoost, Gradient Tree Boosting
    

Bagging meta-estimator :

    In ensemble algorithms, bagging methods form a class of algorithms which build several instances of a black-box estimator on random subsets of the original training set and then aggregate their individual predictions to form a final prediction. These methods are used as a way to reduce the variance of a base estimator (e.g., a decision tree), by introducing randomization into its construction procedure and then making an ensemble out of it.
    In many cases, bagging methods constitute a very simple way to improve with respect to a single model, without making it necessary to adapt the underlying base algorithm. As they provide a way to reduce overfitting, 
    => bagging methods work best with strong and complex models (e.g., fully developed decision trees), 
    => in contrast with boosting methods which usually work best with weak models (e.g., shallow decision trees)
    
    
Bagging methods come in many flavours but mostly differ from each other by the way they draw random subsets of the training set:

    => When random subsets of the dataset are drawn as random subsets of the samples, then this algorithm is known as Pasting
    => When samples are drawn with replacement, then the method is known as Bagging
    => When random subsets of the dataset are drawn as random subsets of the features, then the method is known as Random Subspaces
    => Finally, when base estimators are built on subsets of both samples and features, then the method is known as Random Patches



Forests of randomized trees :

The sklearn.ensemble module includes two averaging algorithms based on randomized decision trees: the RandomForest algorithm and the Extra-Trees method. Both algorithms are perturb-and-combine techniques [B1998] specifically designed for trees. This means a diverse set of classifiers is created by introducing randomness in the classifier construction. The prediction of the ensemble is given as the averaged prediction of the individual classifiers.

As other classifiers, forest classifiers have to be fitted with two arrays: a sparse or dense array X of shape (n_samples, n_features) holding the training samples, and an array Y of shape (n_samples,) holding the target values (class labels) for the training samples:

AdaBoost :

The core principle of AdaBoost is to fit a sequence of weak learners (i.e., models that are only slightly better than random guessing, such as small decision trees) on repeatedly modified versions of the data. The predictions from all of them are then combined through a weighted majority vote (or sum) to produce the final prediction. The data modifications at each so-called boosting iteration consist of applying weights W1 , ,W2 … Wn, to each of the training samples. Initially, those weights are all set to W=1/N, so that the first step simply trains a weak learner on the original data. For each successive iteration, the sample weights are individually modified and the learning algorithm is reapplied to the reweighted data. At a given step, those training examples that were incorrectly predicted by the boosted model induced at the previous step have their weights increased, whereas the weights are decreased for those that were predicted correctly. As iterations proceed, examples that are difficult to predict receive ever-increasing influence. Each subsequent weak learner is thereby forced to concentrate on the examples that are missed by the previous ones in the sequence [HTF].


Gradient Tree Boosting :
    Gradient Tree Boosting or Gradient Boosted Decision Trees (GBDT) is a generalization of boosting to arbitrary differentiable loss functions. GBDT is an accurate and effective off-the-shelf procedure that can be used for both regression and classification problems in a variety of areas including Web search ranking and ecology.

  Loss Functions:
 
    The following loss functions are supported and can be specified using the parameter loss:
    Regression:
        Squared error ('squared_error'): The natural choice for regression due to its superior computational properties. The initial model is given by the mean of the target values.

        Least absolute deviation ('lad'): A robust loss function for regression. The initial model is given by the median of the target values.
        
        Huber ('huber'): Another robust loss function that combines least squares and least absolute deviation; use alpha to control the sensitivity with regards to outliers .

        Quantile ('quantile'): A loss function for quantile regression. Use 0 < alpha < 1 to specify the quantile. This loss function can be used to create prediction intervals (see Prediction Intervals for Gradient Boosting Regression).

Classification:

        Binomial deviance ('deviance'): The binomial negative log-likelihood loss function for binary classification (provides probability estimates). The initial model is given by the log odds-ratio.

        Multinomial deviance ('deviance'): The multinomial negative log-likelihood loss function for multi-class classification with n_classes mutually exclusive classes. It provides probability estimates. The initial model is given by the prior probability of each class. At each iteration n_classes regression trees have to be constructed which makes GBRT rather inefficient for data sets with a large number of classes.

        Exponential loss ('exponential'): The same loss function as AdaBoostClassifier. Less robust to mislabeled examples than 'deviance'; can only be used for binary classification.

Histogram-Based Gradient Boosting:

    These histogram-based estimators can be orders of magnitude faster than GradientBoostingClassifier and GradientBoostingRegressor when the number of samples is larger than tens of thousands of samples.

They also have built-in support for missing values, which avoids the need for an imputer.



Voting Classifier

    The idea behind the VotingClassifier is to combine conceptually different machine learning classifiers and use a majority vote or the average predicted probabilities (soft vote) to predict the class labels. Such a classifier can be useful for a set of equally well performing model in order to balance out their individual weaknesses.
     E.g., if the prediction for a given sample is

            classifier 1 -> class 1
            classifier 2 -> class 1
            classifier 3 -> class 2

    the VotingClassifier (with voting='hard') would classify the sample as “class 1” based on the majority class label.
    In the cases of a tie, the VotingClassifier will select the class based on the ascending sort order. E.g., in the following scenario

            classifier 1 -> class 2

            classifier 2 -> class 1

            the class label 1 will be assigned to the sample.
            
    Weighted Average Probabilities (Soft Voting) :

    In contrast to majority voting (hard voting), soft voting returns the class label as argmax of the sum of predicted probabilities.

    Specific weights can be assigned to each classifier via the weights parameter. When weights are provided, the predicted class probabilities for each classifier are collected, multiplied by the classifier weight, and averaged. The final class label is then derived from the class label with the highest average probability.


Voting Regressor :

    The idea behind the VotingRegressor is to combine conceptually different machine learning regressors and return the average predicted values. Such a regressor can be useful for a set of equally well performing models in order to balance out their individual weaknesses
    
    
Feature selection :

    Removing features with low variance
    Univariate feature selection
    Recursive feature elimination
    Feature selection using SelectFromModel
    Sequential Feature Selection
    Feature selection as part of a pipeline


Multi-layer Perceptron:

    Multi-layer Perceptron (MLP) is a supervised learning algorithm that learn a function f(.) = R^m -> R^o by trainnig on datasets, where  m is the number of dimensions for input and  o is the number of dimensions for output .Given a set of features X = x1,x2,x3......xm and a target y, it can learn a non-linear function approximator for either classification or regression. It is different from logistic regression, in that between the input and the output layer, there can be one or more non-linear layers, called hidden layers. Figure 1 shows a one hidden layer MLP with scalar output.
    
    The advantages of Multi-layer Perceptron are:
        Capability to learn non-linear models.
        Capability to learn models in real-time (on-line learning) using partial_fit.

    The disadvantages of Multi-layer Perceptron (MLP) include:

         MLP with hidden layers have a non-convex loss function where there exists more than one local minimum. Therefore different random weight initializations can lead to different validation accuracy.

        MLP requires tuning a number of hyperparameters such as the number of hidden neurons, layers, and iterations.

        MLP is sensitive to feature scaling.
        
Complexity: 

    Suppose there are  n training samples, m features, k hidden layers, each containing h neurons - for simplicity, and o output neurons. The time complexity of backpropagation is O(n.m.h^k.o.i), where i is the number of iterations. Since backpropagation has a high time complexity, it is advisable to start with smaller number of hidden neurons and few hidden layers for training.


